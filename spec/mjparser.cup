

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

//keywords
terminal PROG, CONST, NEW, PRINT, READ, RETURN, VOID;
terminal DO, WHILE, CONTINUE, BREAK;
terminal IF, ELSE;
terminal CLASS, ENUM, THIS, SUPER, EXTENDS;
terminal GOTO;
terminal RECORD;
//tokens
terminal String IDENT;
terminal Integer NUMBER;
terminal CHAR;
terminal BOOL;
//operators
terminal PLUS, MINUS, MUL, DIV, MOD, EQEQ, NEQ, GR, GREQ, LS, LSEQ, AND, OR, EQ, INC, DEC, SEMI, COL, COMMA, DOT, LNB, RNB, LSB, RSB, LCB, RCB;

nonterminal Program;

Program ::= (Program) PROG IDENT;
