

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

//keywords
terminal PROG, CONST, NEW, PRINT, READ, RETURN, VOID;
terminal DO, WHILE, CONTINUE, BREAK;
terminal IF, ELSE;
terminal CLASS, ENUM, THIS, SUPER, EXTENDS;
terminal GOTO;
terminal RECORD;
//tokens
terminal String IDENT;
terminal Integer NUMBER;
terminal CHAR;
terminal BOOL;
//operators
terminal PLUS, MINUS, MUL, DIV, MOD, EQEQ, NEQ, GR, GREQ, LS, LSEQ, AND, OR;
terminal EQ, INC, DEC, SEMI, COL, COMMA, DOT, LNB, RNB, LSB, RSB, LCB, RCB;

nonterminal Program;
nonterminal InitList, MethodDeclList;
nonterminal InitListElem;
nonterminal ConstDecl;
nonterminal ConstDeclList;
nonterminal ConstDeclItem, ConstDeclListItem;
nonterminal VarDecl;
nonterminal VarDeclItemList;
nonterminal VarDeclItem;
nonterminal MethodDecl;
nonterminal MethodDeclType;
nonterminal MethodDeclArgs;
nonterminal OptArgsList;
nonterminal VarDeclList;
nonterminal OptArgs;
nonterminal OptArgsItem;
nonterminal FormPars;
nonterminal FormPar;
nonterminal Type;
nonterminal Statement;
nonterminal SingleStatement;
nonterminal Expr, DesignatorStatement, Condition;
nonterminal Statements;
nonterminal StatementList;
nonterminal Designator;
nonterminal Assignop;
nonterminal ActPars;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal Term;
nonterminal Factor;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;
nonterminal DesignatorPart, FunDesignatorPart;
precedence left ELSE;

//Program
Program ::= (Program) PROG IDENT InitList LCB MethodDeclList RCB;

MethodDeclList ::= (MethodDeclListFull) MethodDeclList MethodDecl |
				   (MethodDeclListEmpty) ;

InitList ::= (InitListFull) InitList InitListElem |
			 (InitListEmpty) ;

InitListElem ::= (ConstantInit) ConstDecl |
				 (VariableInit) VarDecl;

//ConstDecl
ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclListMultiple) ConstDeclList COMMA ConstDeclListItem |
				  (ConstDeclListSingle) ConstDeclListItem;

ConstDeclListItem ::= (ConstDeclListItem) IDENT:label EQ ConstDeclItem;

ConstDeclItem ::= (ConstDeclItemNumber) NUMBER:value |
				  (ConstDeclItemChar) CHAR:value |
				  (ConstDeclItemBool) BOOL:value;

//VarDecl
VarDecl ::= (VarDecl) Type VarDeclItemList SEMI;

VarDeclItemList ::= (VarDeclItemListMultiple) VarDeclItemList COMMA VarDeclItem |
			    (VarDeclItemListSingle) VarDeclItem;

VarDeclItem ::= (VarDeclItemItem) IDENT:label |
			    (VarDeclItemArray) IDENT:label LSB RSB;

//MethodDecl
MethodDecl ::= (MethodDecl) MethodDeclType IDENT:label LNB MethodDeclArgs RNB VarDeclList Statements;

MethodDeclType ::= (MethodDeclTypeType) Type |
				   (MethodDeclTypeVoid) VOID;

MethodDeclArgs ::=  (MethodDeclArgsBoth) FormPars COMMA OptArgsList |
					(MethodDeclArgsOpt) OptArgsList |
					(MethodDeclArgsForm) FormPars |
					(MethodDeclArgsEmpty) ;

OptArgsList ::= (OptArgsListMultiple) OptArgsList COMMA OptArgs |
			    (OptArgsListSingle) OptArgs;

VarDeclList ::= (VarDeclListFull) VarDeclList VarDecl |
				(VarDeclListEmpty) ;
//OptArgs
OptArgs ::= (OptArgs) Type IDENT EQ OptArgsItem;

OptArgsItem ::= (OptArgItemNumber) NUMBER:value |
				(OptArgItemChar) CHAR:value |
				(OptArgItemBool) BOOL:value;

//FormPars
FormPars ::= (FormParsMultiple) FormPars COMMA FormPar |
			 (FormParsSingle) FormPar;

FormPar ::= (FormParItem) Type IDENT:label |
			(FormParArray) Type IDENT:label LSB RSB;

//Type
Type ::= (Type) IDENT:label;

//Statement
Statement ::= (StatementSingle) SingleStatement |
			  (StatementMultiple) Statements;

//SingleStatement
SingleStatement ::= (SingleStatementDesignatorStatement) DesignatorStatement SEMI |
					(IfStatement) IF LNB Condition RNB Statement |
					(IfElseStatement) IF LNB Condition RNB Statement ELSE Statement |
					(DoWhileStatement) DO Statement WHILE LNB Condition RNB SEMI |
					(BreakStatement) BREAK SEMI |
					(ContinueStatement) CONTINUE SEMI |
					(ReturnStatement) RETURN SEMI |
					(ReturnStatementValue) RETURN Expr SEMI |
					(ReadStatement) READ LNB Designator RNB SEMI |
					(PrintStatement) PRINT LNB Expr RNB SEMI |
					(PrintStatementValue) PRINT LNB Expr COMMA NUMBER RNB SEMI;

//Statements
Statements ::= LCB StatementList RCB;

StatementList ::= (StatementListFull) StatementList Statement |
				  (StatementListEmpty) ;

//DesignatorStatement

DesignatorStatement ::= (DesignatorStatement) Designator DesignatorPart;

DesignatorPart ::= (DesignatorPartAssign) Assignop Expr |
				   (DesignatorPartFun) LNB FunDesignatorPart RNB |
				   (DesignatorPartInc) INC |
				   (DesignatorPartDec) DEC;

FunDesignatorPart ::= (FunDesignatorPartFull) ActPars |
					  (FunDesignatorPartEmpty) ;

//ActPars

ActPars ::= (ActParsMultiple) ActPars COMMA Expr |
			(ActParsSingle) Expr;

//Condition

Condition ::= (ConditionMultiple) Condition OR CondTerm |
			  (ConditionSingle) CondTerm;

//CondTerm

CondTerm ::= (CondTermMultiple) CondTerm AND CondFact |
			 (CondTermSingle) CondFact;

//CondFact

CondFact ::= (CondFactTwo) Expr Relop Expr |
			 (CondFactSingle) Expr; 

//Expr

Expr ::= (ExprMultiple) Expr Addop Term |
		 (ExprNeg) MINUS Term |
		 (ExprPos) Term;
   
//Term

Term ::= (TermMultiple) Term Mulop Factor |
		 (TermSingle) Factor;

//Factor

Factor ::=  (FactorDesignator) Designator |
			(FactorDesignatorFun) Designator LNB FunDesignatorPart RNB |
			(FactorNumber) NUMBER |
			(FactorChar) CHAR |
			(FactorBool) BOOL |
			(FactorNewArr) NEW Type LSB Expr RSB |
			(FactorExpr) LNB Expr RNB;

//Designator

Designator ::= (DesignatorIdent) Designator LSB Expr RSB |
			   (DesignatorSingle) IDENT ;

//Assignop

Assignop ::= (Assignop) EQ;

//Relop

Relop ::= (RelopEQEQ) EQEQ |
		  (RelopNEQ) NEQ |
		  (RelopGR) GR |
		  (RelopGREQ) GREQ |
		  (RelopLS) LS |
		  (RelopLSEQ) LSEQ;

//Addop

Addop ::= (AddopPLUS) PLUS |
		  (AddopMINUS) MINUS;

//Mulop

Mulop ::= (MulopMUL) MUL |
		  (MulopDIV) DIV |
		  (MulopMOD) MOD;