errors:
    (SingleStatementError) error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
    ✔ definicija globalne promenljive – ignorisati karaktere do prvog znaka ";" ili sledećeg "," @done(22-08-21 22:24)
    ✔ konstrukcija iskaza dodele – ignorisati karaktere do ";" @done(22-08-21 23:17)
    ✔ deklaracija formalnog parametra funkcije – ignorisati znakove do znaka "," ili ")" @done(22-08-21 23:46)
    ✔ logički izraz unutar if konstrukcije - ignorisati karaktere do prvog znaka ")" <- Condition @done(22-08-21 23:29)

detect usage:
    ☐ pristup elementu niza
    ☐ globalne promenljive
    ☐ lokalne promenljive
    ☐ globalne funkcije (pozivi)
    ☐ korišćenje formalnog argumenta funkcije

contextual conditions:
    Opšti:
        ✔ Svako ime u programu mora biti deklarisano pre prvog korišćenja @done(22-09-10 23:43)
        ✔ Ime ne sme biti deklarisano više puta unutar istog opsega @done(22-09-11 00:02)
        ✔ U programu mora postojati metoda sa imenom main. Ona mora biti deklarisana kao void metoda bez argumenata. @done(22-09-11 00:06)
    standardne metode:
        ✔ chr(e) e mora biti izraz tipa int. @done(22-09-10 20:42)
        ✔ ord(c) c mora biti tipa char. @done(22-09-10 20:40)
        ✔ len(a) a mora biti niz ili znakovni niz. @done(22-09-10 20:39)
    ConstDecl = ʺconstʺ Type ident ʺ=ʺ (numConst | charConst | boolConst) ʺ;ʺ.:
        ✔ Tip terminala numConst, charConst ili boolConst mora biti ekvivalentan tipu Type @done(22-09-10 19:43)
    MethodDecl = (Type | ʺvoidʺ) ident ʺ(ʺ [FormPars] ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}ʺ.:
        ✔ Ako metoda nije tipa void, mora imati iskaz return unutar svog tela (uslov treba da se proverava u vreme izvršavanja programa). @done(22-09-10 19:42)
    Type = ident.:
        ✔ ident mora označavati tip podataka @done(22-09-10 19:43)
    DesignatorStatement = Designator Assignop Expr ʺ;ʺ.:
        ✔ Designator mora označavati promenljivu, element niza ili polje unutar objekta. @done(22-09-10 18:49)
        ✔ Tip neterminala Expr mora biti kompatibilan pri dodeli sa tipom neterminala Designator. @done(22-09-10 18:54)
    DesignatorStatement = Designator (ʺ++ʺ | ʺ‐‐ʺ) ʺ;ʺ.:
        ✔ Designator mora označavati promenljivu, element niza. @done(22-09-10 18:47)
        ✔ Designator mora biti tipa int. @done(22-09-10 18:48)
    DesignatorStatement = Designator ʺ(ʺ [ActPars] ʺ)ʺ ʺ;ʺ.:
        ✔ Designator mora označavati globalnu funkciju glavnog programa. @done(22-09-10 19:43)
    SingleStatement = ʺbreakʺ.:
        ✔ Iskaz break se može koristiti samo unutar do-while petlje. Prekida izvršavanje neposredno okružujuće do-while petlje. @done(22-09-10 20:27)
    SingleStatement = ʺcontinueʺ.:
        ✔ Iskaz continue se može koristiti samo unutar do-while petlje. Prekida tekuću iteraciju neposredno okružujuće petlje @done(22-09-10 20:27)
    SingleStatement = ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ.:
        ✔ Designator mora označavati promenljivu, element niza ili polje unutar objekta. @done(22-09-10 20:01)
        ✔ Designator mora biti tipa int, char ili bool. @done(22-09-10 20:01)
    SingleStatement = ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ.:
        ✔ Expr mora biti tipa int, char ili bool @done(22-09-10 18:28)
    SingleStatement = ʺreturnʺ [Expr] .:
        ✔ Tip neterminala Expr mora biti ekvivalentan povratnom tipu tekuće metode/ globalne funkcije. @done(22-09-10 19:44)
        ✔ Ako neterminal Expr nedostaje, tekuća metoda mora biti deklarisana kao void. @done(22-09-10 19:45)
        ✔ Ne sme postojati izvan tela (statičkih) metoda, odnosno globalnih funkcija. @done(22-09-10 19:49)
    SingleStatement = ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement].:
        ☐ Naredba if – ukoliko je vrednost uslovnog izraza Condition true, izvršavaju se naredbe u if grani, u suprotnom izvršavaju se naredbe u else grani, ako je navedena.
        ✔ Tip uslovnog izraza Condition mora biti bool. @done(22-09-10 20:56)
    SingleStatement = ʺdoʺ {Statement} ʺwhileʺ ʺ(ʺ Condition ʺ)ʺ ʺ;ʺ .:
        ✔ Uslovni izraz Condition mora biti tipa bool. @done(22-09-10 20:55)
        ☐ Po završetku tela petlje (osim ukoliko se ne naiđe na break) proverava se zadati uslov. Ukoliko je uslov ispunjen skače se na početak petlje, dok se u suprotnom izlazi iz petlje.
    ActPars = Expr {ʺ,ʺ Expr}.:
        ✔ Broj formalnih i stvarnih argumenata metode mora biti isti. @done(22-09-10 18:32)
        ✔ Tip svakog stvarnog argumenta mora biti kompatibilan pri dodeli sa tipom svakog formalnog argumenta na odgovarajućoj poziciji. @done(22-09-10 18:32)
    CondFact = Expr Relop Expr.:
        ✔ Tipovi oba izraza moraju biti kompatibilni. @done(22-09-10 23:33)
        ✔ Uz promenljive tipa niza, od relacionih operatora, mogu se koristiti samo != i ==. @done(22-09-10 23:38)
    Expr = ʺ‐ʺ Term.:
        ✔ Term mora biti tipa int. @done(22-09-10 21:11)
    Expr = Expr Addop Term.:
        ✔ Expr i Term moraju biti tipa int. U svakom slučaju, tipovi za Expr i Term moraju biti komatibilni. @done(22-09-10 21:11)
    Term = Term Mulop Factor.:
        ✔ Term i Factor moraju biti tipa int. @done(22-09-10 21:07)
    Factor = Designator ʺ(ʺ [ActPars] ʺ)ʺ.:
        ✔ Designator mora označavati globalnu funkciju glavnog programa. @done(22-09-10 18:35)
    Factor = ʺnewʺ Type ʺ[ʺ Expr ʺ]ʺ.:
        ✔ Tip neterminala Expr mora biti int. @done(22-09-10 20:57)
    Designator = Designator ʺ[ʺ Expr ʺ]ʺ.:
        ✔ Tip neterminala Designator mora biti niz. @done(22-09-10 20:57)
        ✔ Tip neterminala Expr mora biti int. @done(22-09-10 20:57)
    Assignop = ʺ=ʺ.:
        ☐ Operator dodele vrednosti je desno asocijativan.
    Addop = ʺ+ʺ | ʺ‐ʺ.:
        ☐ Operatori su levo asocijativni.
    Mulop = ʺ*ʺ | ʺ/ʺ | ʺ%ʺ.:
        ☐ Operatori su levo asocijativni.